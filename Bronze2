import sys,math
from typing import List, NamedTuple, Dict
from dataclasses import dataclass


# Define the data structures as @dataclasses
@dataclass
class Vector:
    x: int
    y: int

    def __add__(self, value):
         output = Vector(self.x+value.x,self.y+value.y)
         return output
    def __sub__(self, value):
         output = Vector(self.x-value.x,self.y-value.y)
         return output
    def __mul__(self, value):
         output = Vector(self.x*value,self.y*value)
         return output
    def __div__(self, other):
         output= Vector(self.x/other,self.y/other)
         return output
    def length(self):
         return math.sqrt((self.x**2)+(self.y**2))
    def unit(self):
         vlength = self.length()
         if vlength==0:
            return Vector(0,0)
         else:
            return Vector(self.x/vlength,self.y/vlength)
         

@dataclass
class Fish:
    fish_id: int
    pos: Vector
    maxpos: Vector
    minpos: Vector
    speed: Vector
    color: int
    type: int

@dataclass
class Target:
    target_id: int
    value: int
    status: str

@dataclass
class RadarBlip:
    drone_id: int
    fish_id: int
    dir: str

class Drone(NamedTuple):
    drone_id: int
    pos: Vector
    emergency: bool
    battery: int
    scans: List[int]
    owner: str
    speed: Vector = Vector(0,0)

def dot (a : Vector,b :Vector):
     output = (a.x*b.x,a.y*b.y)
     return output
     

    


# given the position and speed of two objects 
# return two position Vectors equal to their locations at closest approach
def closest_approach(pos1 : Vector,speed1: Vector,pos2: Vector,speed2 : Vector) -> List[Vector]:
    # move to origin
    p1 = pos1 - pos1 # (0,0)
    p2 = pos2 - pos1
    # move refernce frame so origin is stationary
    s1 = speed1 - speed1 # (0,0)
    s2 = speed2 - speed1
    
    #closest_point = pos1 + (s2.unit()*dot((pos1 - pos2),s2.unit()))

# equation for point 1 in time is pos1 + t*speed1
# equation for point 2 in time is pos2 + t*speed2
    
# translating to origin
# p1(t) = pos1-pos1 + t*speed1 = t*speed1
# p2(t) = pos2-pos1 + t*speed2 = p2 + t*speed2

# translating so origin is staionary
# p1(t) = t*speed1 - t*speed1 = 0
# p2(t) = p2 + t*(speed2 - speed1) = p2 + s2


# dot product of moving object and perpendicular = 0
# movi ng object = s2
# perpendicular = p2 - t*s2
# dot(s2,(P2-TS2) = 0)
# s2.x* p2.x - t*s2.x*s2.x + s2.y*p2.y - ts2.y*s2.y = 0
# s2.x*p2.x + s2.y*2.y = t*(s2.x^2+s2.y^2)
# so t = (s2.x*p2.x + s2.y*p2.y) / ( s2.x^2 + s2.y^2)

# if t<0   
# so position of 1 = pos 1 + t * speed1

    if (s2.x*s2.x+s2.y*s2.y) == 0:
        t=0
    else:
        t = ((s2.x*p2.x)+(s2.y*p2.y))/(s2.x*s2.x+s2.y*s2.y)
    cpos1 = Vector(pos1.x+t*speed1.x,pos1.y+t*speed1.y)
    cpos2 = Vector(pos2.x+t*speed2.x,pos2.y+t*speed2.y)
    
    return (cpos1,cpos2)

def dist(a,b):
    return math.sqrt((a.x-b.x)**2+(a.y-b.y)**2)

def new_minmax ():
    # work out the new minx position for all the shoal given the new drone and radar information

    # update based on previous location
    # crop based on radar
    # crop based on min max y
    for rb in my_radar_blips:
        old_min = shoal[rb.fish_id].minpos
        old_max = shoal[rb.fish_id].maxpos
        ref_pos = drone_by_id[rb.drone_id].pos
        #grow the possible area by the maximum speed in each direction
        new_min= Vector(max(old_min.x - 200,0),max(old_min.y - 200,0))
        new_max= Vector(min(old_max.x + 200,10000),min(old_max.y + 200,10000))
        #crop the possible area by the results of the radar
        if rb.dir[1]=="L":
                new_min.x = min(new_min.x,ref_pos.x)
                new_max.x = min(new_max.x,ref_pos.x)
        if rb.dir[1]=="R":
                new_min.x = max(new_min.x,ref_pos.x)
                new_max.x = max(new_max.x,ref_pos.x)
        if rb.dir[0]=="T":
                new_min.y = min(new_min.y,ref_pos.y)
                new_max.y = min(new_max.y,ref_pos.y)
        if rb.dir[0]=="B":
                new_min.y = max(new_min.y,ref_pos.y)
                new_max.y = max(new_max.y,ref_pos.y)
        #crop the possible area by the limits for each type of fish
        shoal[rb.fish_id].minpos = Vector(max(0,new_min.x),max(new_min.y,limits[shoal[rb.fish_id].type][0]))
        shoal[rb.fish_id].maxpos = Vector(min(10000,new_max.x),min(new_max.y,limits[shoal[rb.fish_id].type][1]))
        #set the exact position if the fish is visible
        if shoal[rb.fish_id].pos.x != -1:
             shoal[rb.fish_id].maxpos = shoal[rb.fish_id].pos
             shoal[rb.fish_id].minpos = shoal[rb.fish_id].pos


        #print("Cr:"+str(rb[1])+" "+str(shoal[rb[1]]), file=sys.stderr, flush=True)

def current_value(f):
    #set the value of a given fish based on the type and who has already scanned / landed that fish color / type
    return shoal[f].type

def next_move(pos:Vector, target:Vector,speed:int) -> Vector:
     move = target - pos
     unit_move = move.unit()
     next_step = unit_move * speed
     next_step.x = int(next_step.x)
     next_step.y = int(next_step.y)
     move = next_step + pos
     return move

def best_speed(d:Drone) -> int:
     if d.pos.y<2500:
          bspeed = 600
     else:
          bspeed = 200
     return bspeed


def new_targets():
    for rb in my_radar_blips:
            targets.append(Target(rb.fish_id,current_value(rb.fish_id),"none"))

# global variables and lists
limits=[(2500,5000),(5000,7500),(7500,10000)]
my_scans: List[int] = []
foe_scans: List[int] = []
drone_by_id: Dict[int, Drone] = {}
my_drones: List[Drone] = []
foe_drones: List[Drone] = []
visible_fish: Dict[int,Fish] = {}
monsters: List[Fish] = []
my_radar_blips: List[RadarBlip] = []
targets: List[Target] = []
shoal: Dict[int, Fish] = {}

def initialise_game():
    

    fish_count = int(input())
    for _ in range(fish_count):
   
        fish_id, color, _type = map(int, input().split())
        new_fish = Fish(fish_id,Vector(-1,-1),Vector(10000,10000),Vector(0,0),Vector(-1,-1),color,_type)
        shoal[fish_id] = new_fish


def initialise_loop():
    my_scans.clear()
    foe_scans.clear()
    my_drones.clear()
    foe_drones.clear()
    visible_fish.clear()
    monsters.clear()
    my_radar_blips.clear()
    targets.clear()
    

    my_score = int(input())
    foe_score = int(input())

    my_scan_count = int(input())
    for _ in range(my_scan_count):
        fish_id = int(input())
        my_scans.append(fish_id)

    foe_scan_count = int(input())
    for _ in range(foe_scan_count):
        fish_id = int(input())
        foe_scans.append(fish_id)

    my_drone_count = int(input())
    for _ in range(my_drone_count):
        drone_id, drone_x, drone_y, emergency, battery = map(int, input().split())
        dpos = Vector(drone_x, drone_y)
        
        #find the old position of the drone if we know it to use to calculate the drone speed
        if drone_id in drone_by_id:
             old_pos = drone_by_id[drone_id].pos
        else:
             old_pos = dpos
        
        drone = Drone(drone_id, dpos, emergency == '1', battery, [],"me",dpos-old_pos)

        drone_by_id[drone_id] = drone
        my_drones.append(drone)

    foe_drone_count = int(input())
    for _ in range(foe_drone_count):
        drone_id, drone_x, drone_y, dead, battery = map(int, input().split())
        pos = Vector(drone_x, drone_y)
        drone = Drone(drone_id, pos, dead == '1', battery, [],"foe")        
        drone_by_id[drone_id] = drone
        foe_drones.append(drone)
    
    drone_scan_count = int(input())
    for _ in range(drone_scan_count):
        drone_id, fish_id = map(int, input().split())
        drone_by_id[drone_id].scans.append(fish_id)

    visible_fish_count = int(input())
    for _ in range(visible_fish_count):
        fish_id, fish_x, fish_y, fish_vx, fish_vy = map(int, input().split())
        vpos = Vector(fish_x, fish_y)
        vspeed = Vector(fish_vx, fish_vy)
        visible_fish[fish_id] = Fish(fish_id,vpos,vpos,vpos,vspeed,shoal[fish_id].color,shoal[fish_id].type)
        for f in shoal:
             # if we can see thee fish update the pos and speed, if not reset pos to -1
            if f in visible_fish:
                shoal[f].pos=visible_fish[f].pos
                shoal[f].speed= visible_fish[f].speed
            else:
                shoal[f].pos = Vector(-1,-1)
                shoal[f].speed = Vector(-1,-1)

        if shoal[fish_id].type == -1 :
            monsters.append([fish_id,vpos,vspeed])
            print(f"{len(monsters)} Monsters visible", file=sys.stderr, flush=True)
             
    my_radar_blip_count = int(input())
    for _ in range(my_radar_blip_count):
        drone_id, fish_id, dir = input().split()
        drone_id = int(drone_id)
        fish_id = int(fish_id)
        my_radar_blips.append(RadarBlip(drone_id,fish_id,dir))
            
        

# game initialisation

initialise_game()

# game loop

while True:
    
    initialise_loop()
    
    #update position information
    new_minmax()
    
    #create list of targets
    new_targets()
    #for each drone

    # check for monsters
    
         
    for drone in my_drones:

        for m in monsters:
            ca = closest_approach(drone.pos,drone.speed,m[1],m[2])
            closest = dist(ca[0],ca[1])
            print(f"monster {m[0]} will come {closest}", file=sys.stderr, flush=True)

        max_value =0 
        drone_target = "surface"
        light = 0
        for t in targets:
            if t.status != "owned":
                if t.target_id not in drone_by_id[drone.drone_id].scans:
                    if t.value> max_value:
                        max_value = t.value
                        drone_target = t
                        t.status = 'owned'
        
        if drone_target == "surface":
            target_x = drone.pos.x
            target_y = 0
            print(f"Next Move for Drone {drone.drone_id}: {target_x} {target_y} towards Surface", file=sys.stderr, flush=True)
            
        else:
            target_x = int((shoal[drone_target.target_id].maxpos.x+shoal[drone_target.target_id].minpos.x)/2)
            target_y = int((shoal[drone_target.target_id].maxpos.y+shoal[drone_target.target_id].minpos.y)/2)
            if dist(drone.pos,shoal[drone_target.target_id].pos)<2000 and len(monsters)==0:
                light = 1   
            else:
                light = 0
            n_move = next_move(drone.pos,Vector(target_x,target_y),best_speed(drone))
            print(f"Next Move for Drone {drone.drone_id}: {n_move.x} {n_move.y} towards {drone_target.target_id} at depth {shoal[drone_target.target_id].minpos.y} to {shoal[drone_target.target_id].maxpos.y}", file=sys.stderr, flush=True)
        
        print(f"MOVE {n_move.x} {n_move.y} {light} {str(drone.speed)}")
